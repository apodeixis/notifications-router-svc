/*
Apodeixis notifications-router-svc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package resources

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the NotificatorServiceAllOfAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NotificatorServiceAllOfAttributes{}

// NotificatorServiceAllOfAttributes struct for NotificatorServiceAllOfAttributes
type NotificatorServiceAllOfAttributes struct {
	Endpoint string   `json:"endpoint"`
	Channels []string `json:"channels"`
}

type _NotificatorServiceAllOfAttributes NotificatorServiceAllOfAttributes

// NewNotificatorServiceAllOfAttributes instantiates a new NotificatorServiceAllOfAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificatorServiceAllOfAttributes(endpoint string, channels []string) *NotificatorServiceAllOfAttributes {
	this := NotificatorServiceAllOfAttributes{}
	this.Endpoint = endpoint
	this.Channels = channels
	return &this
}

// NewNotificatorServiceAllOfAttributesWithDefaults instantiates a new NotificatorServiceAllOfAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificatorServiceAllOfAttributesWithDefaults() *NotificatorServiceAllOfAttributes {
	this := NotificatorServiceAllOfAttributes{}
	return &this
}

// GetEndpoint returns the Endpoint field value
func (o *NotificatorServiceAllOfAttributes) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *NotificatorServiceAllOfAttributes) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *NotificatorServiceAllOfAttributes) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetChannels returns the Channels field value
func (o *NotificatorServiceAllOfAttributes) GetChannels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value
// and a boolean to check if the value has been set.
func (o *NotificatorServiceAllOfAttributes) GetChannelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channels, true
}

// SetChannels sets field value
func (o *NotificatorServiceAllOfAttributes) SetChannels(v []string) {
	o.Channels = v
}

func (o NotificatorServiceAllOfAttributes) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NotificatorServiceAllOfAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpoint"] = o.Endpoint
	toSerialize["channels"] = o.Channels
	return toSerialize, nil
}

func (o *NotificatorServiceAllOfAttributes) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpoint",
		"channels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNotificatorServiceAllOfAttributes := _NotificatorServiceAllOfAttributes{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNotificatorServiceAllOfAttributes)

	if err != nil {
		return err
	}

	*o = NotificatorServiceAllOfAttributes(varNotificatorServiceAllOfAttributes)

	return err
}

type NullableNotificatorServiceAllOfAttributes struct {
	value *NotificatorServiceAllOfAttributes
	isSet bool
}

func (v NullableNotificatorServiceAllOfAttributes) Get() *NotificatorServiceAllOfAttributes {
	return v.value
}

func (v *NullableNotificatorServiceAllOfAttributes) Set(val *NotificatorServiceAllOfAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificatorServiceAllOfAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificatorServiceAllOfAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificatorServiceAllOfAttributes(val *NotificatorServiceAllOfAttributes) *NullableNotificatorServiceAllOfAttributes {
	return &NullableNotificatorServiceAllOfAttributes{value: val, isSet: true}
}

func (v NullableNotificatorServiceAllOfAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificatorServiceAllOfAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
